
----------------------------------------------------------------
1. Java Project
----------------------------------------------------------------

project1
    |
    |
    |----p1  ( .java / .class)
    |
    |
    |---- p2
    | |
    | |---- p21 
    |


----------------------------------------------------------------
2. Java File
----------------------------------------------------------------

PublicType.java
-------------------------------------------
| // package declaration (1)
| // import statements ( n )
| // public Type Name( interface | class | enum | annotation) ( 1 )  ( Must )
| // default Types ( n)
|-------------------------------------------


----------------------------------------------------------------
3. package declaration
----------------------------------------------------------------

why we need package?
 => to group related java files under one folder/package
    -> to avoid type-name collisions
    -> maintanance
    
syntax:
    package <name>;

guidelines for package names:
e.g
    company type: edu
    company name: xyz
    project name: training
    module name : student
    java file   : JavaStudent.java

    JavaStudent.java
    ----------------------------------------------------
    package edu.xyz.training.student;

    public class JavaStudent{

    }
    ----------------------------------------------------


    
----------------------------------------------------------------
4. import statements
----------------------------------------------------------------

Proj1
    - p1 ( A.java, B.java)
    - p2 ( C.java, D.java)
      -p21 ( E.java )
    - p3 ( C.java)  

e.g

    package p1;
    //import p2.C;
    //import p2.D;
    // or
    import p3.*;
    import p2.*;
    imort p2.p21.*;
    public class A{
        B b;
        p3.C c1
        D d;
        E e;
    }


-------------------------------------------------------------------
5. User Defined Data Types ( interface | class | enum | annotation)
--------------------------------------------------------------------


___________ __________ class Name  [extends] Base_Class {
                                   [implements] Interface1,Interface2,...                 
[public   ] [abstract]    // variable(s)
[private  ] [final   ]    // constructor(s)
[protected] [strictfp]    // method(s)
[         ]            

                        }      



-------------------------------------------------------------------
6. variables
--------------------------------------------------------------------

2 Types

    1. Primitive/Value ( e.g int age=40)
    2. Reference/Object ( e.g Account acc=new Account() )


    ___________ __________ Type varName=[value | obj] 
    [public   ] [static]
    [private  ] [final ]
    [protected] [transient]
    [         ] [volatile]

    local-vaiables
    ---------------------
     Nil        [final]  


-------------------------------------------------------------------
7. constructor
--------------------------------------------------------------------

in java , object creation is 2-step process

step-1 : dynamic memory allocation : 'new' keyword
step-2 : initialization            : 'constructor'



    ___________ClassName([args]){
    [public   ]    // obj initialization logic
    [private  ]
    [protected] 
    [         ]
               }


-------------------------------------------------------------------
8. method
--------------------------------------------------------------------


function / method

ReturnType => void, Primitive, Reference

___________ ____________ ReturnType methodName([args]){
[public   ] [static    ]    // A,R,L and assigment operations
[private  ] [final     ]    // conditional statements ( if/else, switch)
[protected] [synchronized]  // looping statements ( for, while )
[         ] [strictfp]      // invoke other methods 
                           [return] value | object;
                         }

-------------------------------------------------------------------                         
Java Naming Conventions
------------------------------------------------------------------

keywords : lowercase
package-names : lowercase
Type Name : PascalCase  e.g A____B____C______  e.g JavaEmployee
Variable/method : camel-case e.g ____B___C_____  e.g myName, addNumbers()
Constant Variable : upper-case , e.g TRANSFER_LIMIT=1000.00

----------------------------------------------------------------